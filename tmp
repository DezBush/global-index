import { useState, useEffect } from "react";
import {
  ComposableMap,
  Geographies,
  Geography,
  ZoomableGroup,
} from "react-simple-maps";
import geoMap from "../assets/countries-10m.json";

const WorldMap = () => {
  const [clickedCountry, setClickedCountry] = useState(null);
  const [countryData, setCountryData] = useState(null);

  const getData = async () => {
    try {
      const response = await fetch(`http://localhost:5000/records/country/USA`);
      if (!response.ok) {
        throw new Error("Failed to fetch data");
      }
      const data = await response.json();
      setCountryData(data);
    } catch (error) {
      console.error("Error fetching country data:", error);
      setCountryData(null);
    }
  };

  useEffect(() => {
    if (clickedCountry) {
      getData(clickedCountry); // Fetch data when a country is clicked
    }
  }, [clickedCountry]);

  const handleCountryClick = (geo) => {
    const countryCode = geo.properties.name; // Adjust this based on your GeoJSON file
    setClickedCountry(countryCode);
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-center text-2xl font-bold mb-4">World Map</h1>
      <div className="text-center mb-4">
        {clickedCountry ? (
          <p>You clicked on: {clickedCountry}</p>
        ) : (
          <p>Click on a country</p>
        )}
      </div>

      <div>
        <h2 className="text-lg font-bold">Country Data:</h2>
        {countryData ? (
          <pre className="bg-gray-100 p-4 rounded-lg">
            {JSON.stringify(countryData, null, 2)}
          </pre>
        ) : (
          <p>No data available. Click a country to see details.</p>
        )}
      </div>

      {/* Map */}
      <ComposableMap width={800} height={600}>
        <ZoomableGroup
          translateExtent={[
            [-100, 0], // Min bounds [x, y]
            [900, 600], // Max bounds [x, y]
          ]}
        >
          <Geographies geography={geoMap}>
            {({ geographies }) =>
              geographies.map((geo) => (
                <Geography
                  key={geo.rsmKey}
                  geography={geo}
                  fill="#D6D6DA"
                  stroke="#FFFFFF"
                  onClick={() => handleCountryClick(geo)}
                  style={{
                    default: { outline: "none" },
                    hover: { fill: "#F53", cursor: "pointer", outline: "none" },
                    pressed: { fill: "#E42", outline: "none" },
                  }}
                />
              ))
            }
          </Geographies>
        </ZoomableGroup>
      </ComposableMap>
    </div>
  );
};

export default WorldMap;
